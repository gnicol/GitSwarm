- git_fusion_error = git_fusion_preflight_errors(@project, current_user)
- git_fusion_url   = git_fusion_url(@project)
- has_fusion_error = git_fusion_error && !git_fusion_error.empty?
- has_fusion_url   = git_fusion_url && !git_fusion_url.empty?
- can_reenable     = mirroring_permitted?(@project, current_user) && mirroring_configured? && has_fusion_url && !has_fusion_error
- button_class     = 'btn btn-save' + (can_reenable ? '' : ' disabled')
%p
  Mirroring for this project has been disabled.
%p
  This project was previously mirroring the
  = "'#{@project.git_fusion_server_id}'"
  Helix Git Fusion server on the repo
  = "'#{@project.git_fusion_repo_name}'"
%p
  - if can_reenable
    The Git Fusion repo can be reached via the following Git URL:
    = git_fusion_url
  - else
    = git_fusion_error if has_fusion_error
    = helix_reenable_mirroring_tooltip(@project)
    %br
      = link_to '#' do
        %strong= 'Please fix the configuration'
      to re-enable mirroring for this project.
= render partial: 'perforce_swarm/git_fusion/projects/mirroring_config_errors'
.reenable-mirror-wrapper
  %span.reenable-mirror-button-wrapper{data: {toggle: 'tooltip', html: 'true', title: helix_reenable_mirroring_tooltip(@project)}}
    = link_to '#', class: button_class do
      = icon 'helix-icon-white'
      Re-enable Helix Mirroring
  .reenable-status
- reenable_error = @project.git_fusion_reenable_error
- reenable_error = reenable_error.is_a?(String) ? reenable_error.strip : reenable_error
:javascript
  var reenable_helix_mirroring;

  reenable_helix_mirroring = new ReenableHelixMirroring({
    reenable_url: "#{reenable_helix_mirroring_perforce_swarm_git_fusion_path(project_id: @project.id)}",
    reenable_status_url: "#{reenable_helix_mirroring_status_perforce_swarm_git_fusion_path(project_id: @project.id)}",
    status: "#{@project.git_fusion_reenable_status}",
    error: "#{reenable_error}",
    success_redirect: "#{reenable_helix_mirroring_redirect_perforce_swarm_git_fusion_path(project_id: @project.id)}"
  });
